Thank you @vyasr for your review and comments. 

Cool project @chasmani! I have actually wanted the ability to perform piecewise fits like this before. Have you ever looked at pwlf? At one point I attempted to use it for similar tasks during my PhD, and although I didn't end up incorporating it into production workflows I found that it did a reasonably good job. It uses a significantly different algorithm described in this paper, but I think he also considered the Muggeo paper. You might benefit from some collaboration with the author of that package.

The code quality here looks good, as do your docstrings. I have some notes in addition to my checklist above. I'll denote which ones I consider to be requirements to address in some fashion, and which ones that I'd just like to suggest as part of the review process but aren't necessary for me to approve the submission.
Requirements:

1. It looks like you addressed @htjb's suggestion to include information on installing from source, but it's missing newlines. I think your best bet since it's an rst file is to use a bash directive like .. code:: bash at the top of that block for proper formatting.
**Done**

2. I think the statement of need should include some more concrete examples. What are common use cases for piecewise linear fits? When are they more appropriate than curve fits (or simple linear regression)?
**Done**

3. I mentioned pwlf at the top of this review, I think you should at least mention its existence since it is closely related and is a Python option unlike the R packages you currently mention. It might also be nice to include a rough comparison of the different methodologies. IIRC that package uses Lagrange multipliers for local solutions, combined with a differential evolution algorithm for global optimization, but I haven't looked at it in a long time. Perhaps there are others as well, and I think the paper would benefit from a survey to see if such packages exist.
**Done, good call.**

4a. The first sentence of "How it works" seems out of place. 
**Done**

4b. Stating that we don't need to know the theory seems like a better fit for the summary by stating something like "this package hides the mathematical complexities of constructing a piecewise fit behind a simple interface" or so.
**I've removed the line from "How It Works". I decided not to add anythig to the summary for conciseness, I think "easy-to-use" covers it**

5. The example presents a raw plot with no context. Please give some description of the generating model, hopefully in the context of some realistic process that it may represent.
**Agreed. I explained the data generation process as a pieceiwise linear model with Gaussian noise. I gave the example of observations of a physical process with noise due to sampling errors, so the noise could reasonably be expected to be Gaussian and constant.**
**That is quite an abstract example, with the benefit that it represents the general nature of the fitting algorithm. I thought about generating data based on a more specific real process, but that could require specific caveats that would detract from the general nature of the algorithm, and I do not have deep domain expertise in a suitable area to talk authoritatively about the forms of data.**

6. We need to see a few more references for the Davies and BIC tests.
**Done**

Nice to have:

7. I don't think there's any need for pip3 in the install, just pip should be fine. On any modern Python installation that will alias to pip.
**Done**

8. Have you considered supporting conda-forge? For a pure Python package like yours it should be relatively trivial, you just need to create a feedstock. Not critical, just something to consider since it's a popular installation method these days.
**TO DO ** 

9. While your tests run fine, I would recommend switching away from nose to either raw unittest. nose has not been supported for >5 years last I checked. pytest would be a more modern alternative, but it would require more effort to restructure your tests.
**Done. Now uses pytest (tis was also easier to integrate with codecov.io)**

10. In addition to @htjb's recommendation of using flake8, I would also recommend adding some additional linters like black, pydocstyle, and isort to automate as much formatting as possible. pre-commit can help significantly with managing those.
**Thanks I'll take a look at those. I've already done the formatting for this project to be PEP8 compliant for this stage. I'll look at using some of those linters in my normal workflow from now on, so when I come to make future changes I will most likely integrate them into this library.** 

11. Strongly in favor of @htjb's recommendation of adding CI testing.
**Done**

12. It would be nice to indicate how your package uses statsmodel internally for ordinary least squares (and potentially what you're using numpy for if it's anything more than just standard numpy ops, which could be mentioned in a single sentence).
**statsmodels is used to perform ordinary least squares. Added to the How It Works section.**
**Also added details of all required packages and what they are used for in the readme.**
**Numpy is used for normal standard ops. The most unusual use is np.heaviside, which is used to transform data prior to fitting (could easily be implemented as my own function). That is shown in the example code as well.**

13. You could embed your examples along with the code to generate them on your ReadTheDocs. If you're feeling adventurous, nbsphinx would let you create a notebook with the example and embed that directly.
**Done**